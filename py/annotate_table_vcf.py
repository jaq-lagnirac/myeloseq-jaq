# Justin Caringal
# Reads in directory of VCF files and annotates inputted table with
# set/source of coverage

import os
import sys
import argparse
import logging
import json
import pandas as pd

VCF_SUFFIX = '.annotated_filtered.vcf'

SEP = '\t'

ROUNDING_DECIMALS = 3

SCRIPT_PATH = os.path.abspath(__file__)
FORMAT = '[%(asctime)s] %(levelname)s %(message)s'
l = logging.getLogger()
lh = logging.StreamHandler()
lh.setFormatter(logging.Formatter(FORMAT))
l.addHandler(lh)
l.setLevel(logging.INFO)
debug = l.debug; info = l.info; warning = l.warning; error = l.error

DESCRIPTION = '''

Takes comparison table generated by coverage_table.py and a directory of VCF files to

annotated the table with the source (i.e. the "set") of the coverage

'''

EPILOG = '''

Outputs statistics in .err file.

'''

class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
    argparse.RawDescriptionHelpFormatter):
  pass
parser = argparse.ArgumentParser(description=DESCRIPTION, epilog=EPILOG,
  formatter_class=CustomFormatter)

parser.add_argument('coverage_table',
                    help='TSV table to be annotated')
parser.add_argument('directory',
                    help='Directory of VCF files')
parser.add_argument('-v', '--verbose',
                    action='store_true',
                    help='Set logging level to DEBUG')

args = parser.parse_args()

if args.verbose:
  l.setLevel(logging.DEBUG)



def add_set(row):
  dir_name = row['directory name']
  chrom = row['chrom']
  ref = row['ref']
  alt = row['alt']
  pos = row['start'] + 1
  # NOTE: VCF is 1-based, must covert between
  # 0-based half open BED notation that is contained
  # in the file

  file_name = f'{dir_name}{VCF_SUFFIX}'
  file_path = os.path.join(args.directory, file_name)
  if os.path.exists(file_path):
    print(f'YAY! {file_path}')
  else:
    print(f'AHHHHHHHHH! {file_path}')
  return row



debug('%s begin', SCRIPT_PATH)


coverage_table = pd.read_csv(args.coverage_table, sep=SEP)
# NOTE: 1 = columns, apply function to each row
annotated_table = coverage_table.apply(add_set, axis=1)


debug('%s end', SCRIPT_PATH)